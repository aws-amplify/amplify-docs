--- a/src/components/AlbumDetails.js
+++ b/src/components/AlbumDetails.js
+++ b/Users/ecclemm/Projects/ericclemmons/docs/js/tutorials/photo-albums-in-react/_steps/src/components/AlbumDetails.js/p4s4.js
@@ -0,0 +1,85 @@
+import { API } from 'aws-amplify';
+import React, { useEffect, useState } from 'react';
+import {
+  Button,
+  Dimmer,
+  Header,
+  Loader,
+  Message,
+  Segment
+} from 'semantic-ui-react';
+
+import PhotoList from './PhotoList';
+import { getAlbum } from '../graphql/queries';
+import useAuth from '../useAuth';
+
+function AlbumDetails({ album }) {
+  const { owner } = useAuth();
+  const photos = album.photos.items;
+
+  return (
+    <Segment.Group>
+      <Segment clearing>
+        <Header data-test="album-header" floated="left" size="huge">
+          <Header.Content>album.name</Header.Content>
+
+          {owner && (
+            <Header.Subheader>
+              <Button
+                basic
+                circular
+                content="Edit"
+                icon="pencil"
+                size="mini"
+                style={{ position: 'relative', top: '0.5em' }}
+              />
+            </Header.Subheader>
+          )}
+        </Header>
+      </Segment>
+
+      <Segment data-test="album-content" tertiary>
+        <PhotoList photos={photos} />
+      </Segment>
+    </Segment.Group>
+  );
+}
+
+export default function AlbumDetailsLoader(props) {
+  const { id } = props;
+  const { owner } = useAuth();
+  const [isLoading, setIsLoading] = useState(true);
+  const [album, setAlbum] = useState();
+
+  useEffect(() => {
+    API.graphql({
+      authMode: owner ? 'AMAZON_COGNITO_USER_POOLS' : 'AWS_IAM',
+      query: getAlbum,
+      variables: { id }
+    }).then(payload => {
+      if (payload.data.getAlbum) {
+        setAlbum(payload.data.getAlbum);
+      }
+
+      setIsLoading(false);
+    });
+  }, [id, owner]);
+
+  if (isLoading) {
+    return (
+      <Dimmer active inverted page>
+        <Loader />
+      </Dimmer>
+    );
+  }
+
+  if (!album) {
+    return (
+      <Message native>
+        <Message.Header>Album not found</Message.Header>
+      </Message>
+    );
+  }
+
+  return <AlbumDetails album={album} key={`${album.id}-${album.version}`} />;
+}