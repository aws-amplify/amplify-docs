--- a/src/components/AlbumDetails.js
+++ b/src/components/AlbumDetails.js
@@ -1,4 +1,4 @@
-import { API } from 'aws-amplify';
+import { API, Storage } from 'aws-amplify';
 import React, { useEffect, useState } from 'react';
 import {
   Button,
@@ -6,16 +6,81 @@ import {
   Header,
   Loader,
   Message,
-  Segment
+  Segment,
+  Form
 } from 'semantic-ui-react';
 
+import {
+  onCreatePhoto,
+  onDeletePhoto,
+  onUpdateAlbum,
+  onUpdatePhoto
+} from '../graphql/subscriptions';
+
+import DeleteAlbum from './DeleteAlbum';
 import PhotoList from './PhotoList';
 import { getAlbum } from '../graphql/queries';
 import useAuth from '../useAuth';
 
 function AlbumDetails({ album }) {
   const { owner } = useAuth();
-  const photos = album.photos.items;
+  const [photos, setPhotos] = useState(album.photos.items);
+
+  useEffect(() => {
+    const subscription = API.graphql({
+      authMode: owner ? 'AMAZON_COGNITO_USER_POOLS' : 'AWS_IAM',
+      query: onCreatePhoto,
+      variables: { owner }
+    }).subscribe({
+      next(payload) {
+        const photo = payload.value.data.onCreatePhoto;
+
+        setPhotos(prevPhotos => [photo, ...prevPhotos]);
+      }
+    });
+
+    return () => subscription.unsubscribe();
+  }, [owner]);
+
+  useEffect(() => {
+    const subscription = API.graphql({
+      authMode: owner ? 'AMAZON_COGNITO_USER_POOLS' : 'AWS_IAM',
+      query: onDeletePhoto,
+      variables: { owner }
+    }).subscribe({
+      next(payload) {
+        const photo = payload.value.data.onDeletePhoto;
+
+        Storage.remove(photo.fullsize.key);
+
+        setPhotos(prevPhotos => {
+          return prevPhotos.filter(prevPhoto => prevPhoto.id !== photo.id);
+        });
+      }
+    });
+
+    return () => subscription.unsubscribe();
+  }, [owner]);
+
+  useEffect(() => {
+    const subscription = API.graphql({
+      authMode: owner ? 'AMAZON_COGNITO_USER_POOLS' : 'AWS_IAM',
+      query: onUpdatePhoto,
+      variables: { owner }
+    }).subscribe({
+      next(payload) {
+        const photo = payload.value.data.onUpdatePhoto;
+
+        setPhotos(prevPhotos => {
+          return prevPhotos.map(prevPhoto => {
+            return prevPhoto.id === photo.id ? photo : prevPhoto;
+          });
+        });
+      }
+    });
+
+    return () => subscription.unsubscribe();
+  }, [owner]);
 
   return (
     <Segment.Group>
@@ -41,6 +106,10 @@ function AlbumDetails({ album }) {
       <Segment data-test="album-content" tertiary>
         <PhotoList photos={photos} />
       </Segment>
+
+      <Segment data-test="album-footer" clearing secondary>
+        <DeleteAlbum album={album} />
+      </Segment>
     </Segment.Group>
   );
 }
@@ -65,6 +134,20 @@ export default function AlbumDetailsLoader(props) {
     });
   }, [id, owner]);
 
+  useEffect(() => {
+    const subscription = API.graphql({
+      authMode: owner ? 'AMAZON_COGNITO_USER_POOLS' : 'AWS_IAM',
+      query: onUpdateAlbum,
+      variables: { owner }
+    }).subscribe({
+      next(payload) {
+        setAlbum(payload.value.data.onUpdateAlbum);
+      }
+    });
+
+    return () => subscription.unsubscribe();
+  }, [id, owner]);
+
   if (isLoading) {
     return (
       <Dimmer active inverted page>